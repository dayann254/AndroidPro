package com.example.deebeauty

import android.os.Message
import androidx.compose.foundation.ScrollState
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.ColumnScope
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyListScope
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.runtime.snapshots.SnapshotStateList
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.ViewModel

private val Message.content: String
    get() {
        TODO("Not yet implemented")
    }
private val Message.senderId: String
    get() {
        TODO("Not yet implemented")
    }

data class Message(
    val senderId: String,
    val receiverId: String,
    val content: String,
    val timestamp: Long
)


class MessageViewModel : ViewModel() {
    private val _messages = mutableStateListOf<Message>()
    val messages: List<Message> get() = _messages

    fun sendMessage(message: com.example.deebeauty.Message) {
        // Send message logic
        _messages.add(message)
    }

    // Other methods for receiving messages, etc.
}

private fun <T> SnapshotStateList<T>.add(element: com.example.deebeauty.Message) {
    TODO("Not yet implemented")
}


@Composable
fun MessagingScreen(messageViewModel: MessageViewModel) {
    val messages = messageViewModel.messages
    val scrollState = rememberScrollState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // Display messages
        LazyColumn(
            state = scrollState,
            reverseLayout = true,
            modifier = Modifier.weight(1f)
        ) {
            items(messages) { message ->
                MessageItem(message)
            }
        }

        // Input field for new message
        var newMessage by remember { mutableStateOf("") }
        TextField(
            value = newMessage,
            onValueChange = { newMessage = it },
            modifier = Modifier.fillMaxWidth()
        )
        Button(
            onClick = {
                // Send message when button is clicked
                messageViewModel.sendMessage(
                    Message(senderId = "senderId", receiverId = "receiverId", content = newMessage, timestamp = System.currentTimeMillis())
                )
                newMessage = ""
            },
            modifier = Modifier
                .align(Alignment.End)
                .padding(top = 8.dp)
        ) {
            Text("Send")
        }
    }
}

private fun ColumnScope.LazyColumn(
    state: ScrollState,
    reverseLayout: Boolean,
    modifier: Modifier,
    content: LazyListScope.() -> Unit
) {
    TODO("Not yet implemented")
}

@Composable
fun MessageItem(message: Message) {
    Text("${message.senderId}: ${message.content}")
}
@Preview(showSystemUi = true, showBackground = true )
@Composable
fun MessagingScreenPreview(){
    MessagingScreen(remember {
        MessageViewModel()
    } )

}
