package com.example.androidproject

import android.content.DialogInterface.OnShowListener
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountBox
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material.icons.filled.ThumbUp
import androidx.compose.material3.BottomAppBarDefaults
import androidx.compose.material3.Button
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.FloatingActionButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.tooling.preview.PreviewParameter
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.androidproject.ui.theme.AndroidProjectTheme
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

class FrontEndTestActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            AndroidProjectTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    content1()
                    Button1 {}
                    Button2 {}
                    content2 ()
                    LinearIndicator()

                }
            }
        }
    }
}

fun image(
    painter: Painter,
    contentDescription: String,
    contentScale: ContentScale,
    modifier: Modifier
) {
    TODO("Not yet implemented")
}
@Composable
fun ListScreen(modifier: Modifier=Modifier,employees:List<String>,languages:List<String>) {
    Box(modifier = Modifier.fillMaxSize()) {
        image(
            painter = painterResource(id = R.drawable.building),
            contentDescription = "Background Image",
            contentScale = ContentScale.FillBounds,
            modifier = Modifier.matchParentSize()
        )
    }
}
@Composable
    fun content1(){

        TextComponent(
            value = "Wanderly",
            25.sp,
            Color.White,
        )
    TextComponent(value = "Your Ultimate Companion for Seamless Travel Experiences",
        15.sp ,
        Color.White)
}
@Composable
fun Button1(onClick: () -> Unit) {
    Button(onClick = { onClick() }) {
        Text("Sign in with Phone Number")
    }
}
@Composable
fun Button2(onClick: () -> Unit) {
    OutlinedButton(onClick = { onClick() }) {
        Text("Sign in with Apple")
    }
}
@Composable
fun content2(){
    TextComponent(
        value = "Don't have an account? Sign Up",
        10.sp,
        Color.White
    )
    TextComponent(
        value ="By creating an account or signing in,you agree to our Terms of Service and Privacy Policy" ,
        7.sp,
        Color.White
    )

}



fun LinearProgressIndicator(progress: () -> Float, modifier: Modifier) {
    TODO("Not yet implemented")
}
@Composable
fun LinearIndicator() {
    var currentProgress by remember { mutableStateOf(0f) }
    var loading by remember { mutableStateOf(false) }
    val scope = rememberCoroutineScope() // Create a coroutine scope

    Column(
        verticalArrangement = Arrangement.spacedBy(12.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier.fillMaxWidth()
    ) {
        Button(onClick = {
            loading = true
            scope.launch {
                loadProgress { progress ->
                    currentProgress = progress
                }
                loading = false // Reset loading when the coroutine finishes
            }
        }, enabled = !loading) {
            Text("Start loading")
        }

        if (loading) {
            LinearProgressIndicator(
                //progress = { currentProgress },
                modifier = Modifier.fillMaxWidth(),
            )
        }
    }
}
@Preview
@Composable
fun IndexPreview() {
    @Composable
    fun ListScreen(
        modifier: Modifier = Modifier,
        employees: List<String>,
        languages: List<String>
    ) {
        Box(modifier = Modifier.fillMaxSize()) {
            image(
                painter = painterResource(id = R.drawable.building),
                contentDescription = "Background Image",
                contentScale = ContentScale.FillBounds,
                modifier = Modifier.matchParentSize()
            )
        }
    }


    TextComponent(
        value = "Wanderly",
        25.sp,
        Color.White,
    )
    TextComponent(
        value = "Your Ultimate Companion for Seamless Travel Experiences",
        15.sp,
        Color.White
    )
}
