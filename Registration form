package com.example.deebeauty.ui.theme.screens.register

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.Checkbox
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import com.example.deebeauty.navigation.ROUTE_LOGIN

@Composable
fun RegisterScreen(navController: NavHostController) {
    var fullName by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }
    var contact by remember { mutableStateOf("") }
    var residence by remember { mutableStateOf("") }
    var productsInterest by remember { mutableStateOf(false) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .background(color = Color.White)
    ) {
        LinearProgressIndicator(
            progress = calculateProgress(
                fullName = fullName,
                email = email,
                contact = contact,
                residence = residence,
                productsInterest = productsInterest
            ),
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(16.dp))

        TextField(
            value = fullName,
            onValueChange = { fullName = it },
            label = { Text("Full Name") }
        )
        Spacer(modifier = Modifier.height(16.dp))

        TextField(
            value = email,
            onValueChange = { email = it },
            label = { Text("Email") }
        )
        Spacer(modifier = Modifier.height(16.dp))

        TextField(
            value = contact,
            onValueChange = { contact = it },
            label = { Text("Contact") }
        )
        Spacer(modifier = Modifier.height(16.dp))

        TextField(
            value = residence,
            onValueChange = { residence = it },
            label = { Text("Residence") }
        )
        Spacer(modifier = Modifier.height(16.dp))

        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Checkbox(
                checked = productsInterest,
                onCheckedChange = { productsInterest = it },
                modifier = Modifier.padding(end = 8.dp)
            )
            Text("Products of Interest")
        }
        Spacer(modifier = Modifier.weight(1f))

        Button(onClick = { ROUTE_LOGIN }) {
            Text("Register")
        }
    }
}

fun calculateProgress(
    fullName: String,
    email: String,
    contact: String,
    residence: String,
    productsInterest: Boolean
): Float {
    val totalFields = 5
    var filledFields = 0

    if (fullName.isNotBlank()) filledFields++
    if (email.isNotBlank()) filledFields++
    if (contact.isNotBlank()) filledFields++
    if (residence.isNotBlank()) filledFields++
    if (productsInterest) filledFields++

    return filledFields.toFloat() / totalFields


}

@Preview
@Composable
fun RegistrationFormPreview(){
    RegisterScreen( rememberNavController())}



